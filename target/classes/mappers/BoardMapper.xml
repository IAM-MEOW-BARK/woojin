<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="kr.co.dong.boardMapper">
  	<!-- 로그인 -->
 	<select id="login" parameterType="java.util.Map" resultType="java.util.Map">
 		select user_id,name,user_auth, user_status from member
 		where user_id=#{user_id} and password=#{password}
 	</select>
 	
 	<!-- 최근 접속 -->
 	<update id="updateConnectedAt" parameterType="java.util.Map">
	    update member
	    set connected_at = now()
	    where user_id = #{user_id};
	</update>
	
	<!-- 아이디 찾기 -->
	<select id="find-id" parameterType="java.util.Map" resultType="java.util.Map">
		select user_id from member
		where name=#{name} and phone_num=#{phone_num}
	</select>
	
	<!-- 소셜 로그인 아이디 찾기 -->
	<select id="find-userId" parameterType="java.util.Map" resultType="java.util.Map">
		select user_id from member
		where user_id=#{user_id}
	</select>
	
	<!-- 소셜 아이디 로그인 -->
 	<select id="socail-login" parameterType="java.util.Map" resultType="java.util.Map">
 		select user_id from member
 		where user_id=#{user_id}
 	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="find-pw" parameterType="java.util.Map" resultType="java.util.Map">
		select password from member
		where user_id = #{user_id} and name = #{name} and phone_num = #{phone_num}
	</select>
 	
 	<!-- 회원가입 -->
 	<insert id="sign-up" parameterType="MemberDTO">
	    insert into member (user_id, social_id, password, name, phone_num, user_auth, user_created_at)
	    values (#{user_id}, #{social_id}, #{password}, #{name}, #{phone_num}, 
	            #{user_auth}, now())
	</insert>
 	
 	<!-- 이메일 중복 -->
 	<select id="email-check" parameterType="String" resultType="int">
	    select count(*) from member
	    where user_id = #{user_id}
	</select>
	
	<!-- 상품코드 중복 -->
	<select id="product-code-check" parameterType="Integer" resultType="int">
		select count(*) from product
	    where product_code = #{product_code}
	</select>
		
	<!-- 상품 관리 리스트 -->
	<select id="getTotalProduct" resultType="ProductDTO">
 		<!-- select * from product
 		order by product_regdate desc -->
 		select *
		from product
		order by product_regdate desc
       	limit #{start}, #{pageSize}
 	</select>
 	
 	<!-- 상품 리스트 검색 필터 -->
 	<select id="productListFilter" parameterType="java.util.Map" resultType="productDTO">
         SELECT * FROM product WHERE 1 = 1
        <!-- 검색 유형 조건 -->
        <if test="searchKeyword != null and searchKeyword != ''">
	        <choose>
            <when test="searchType == 'product_name'">
                AND product_name LIKE CONCAT('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'product_code'">
                AND product_code LIKE CONCAT('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'product_category'">
                AND product_category LIKE CONCAT('%', #{searchKeyword}, '%')
            </when>
        </choose>
        </if>
        
        <!-- 기간 조건 -->        
	     <if test="startDate != null and startDate != ''">
	        AND product_regdate >= #{startDate}
	    </if>
		<if test="endDate != null and endDate != ''">
            <![CDATA[
            AND product_regdate <= #{endDate}
            ]]>
		</if>
    </select>
    
    <!-- 상품 검색 필터 페이징 -->    
    <select id="searchProductWithPaging" resultType="ProductDTO">
	    SELECT *
	    FROM product
	    WHERE 1=1
	        <if test="searchKeyword != null and searchKeyword != ''">
		        <choose>
	            <when test="searchType == 'product_name'">
	                AND product_name LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	            <when test="searchType == 'product_code'">
	                AND product_code LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	            <when test="searchType == 'product_category'">
	                AND product_category LIKE CONCAT('%', #{searchKeyword}, '%')
	            </when>
	        </choose>
	        </if>
	        <if test="startDate != null and startDate != ''">
	            AND product_regdate >= #{startDate}
	        </if>
	        <if test="endDate != null and endDate != ''">
	         <![CDATA[
	            AND product_regdate <= #{endDate}
	           ]]>
	        </if>
	    ORDER BY product_regdate DESC
	    LIMIT #{start}, #{pageSize}
	</select>

	<select id="getFilteredProductCount" resultType="java.lang.Integer">
	    SELECT COUNT(*)
	    FROM product
	    WHERE 1=1
	       <if test="searchKeyword != null and searchKeyword != ''">
		        <if test="searchType == 'product_name'">
		            AND product_name LIKE CONCAT('%', #{searchKeyword}, '%')
		        </if>
		        <if test="searchType == 'product_code'">
		            AND product_code LIKE CONCAT('%', #{searchKeyword}, '%')
		        </if>
	        </if>
	        <if test="startDate != null and startDate != ''">
	            AND product_regdate >= #{startDate}
	        </if>
	        <if test="endDate != null and endDate != ''">
	        	<![CDATA[
	            AND product_regdate <= #{endDate}
	            ]]>
	        </if>
	</select>
 	
 	<!-- 상품 관리 리스트 페이징 -->
 	<select id="productPaging" resultType="java.lang.Integer">
		select count(*) from product;
	</select>	
	
	<!-- 상품 단일 조회  -->
	<select id="getProductByCode" parameterType="java.util.Map" resultType="ProductDTO">
	    SELECT *
	    FROM product
	    WHERE product_code = #{product_code}
	</select>
	
	<!-- 상품 상세 -->
	<select id="getOrderInfo" parameterType="String" resultType="OrderItemDTO">
	      SELECT 
	        oi.order_item_code,
	        oi.order_code,
	        oi.product_code,	        
	        oi.order_status,
	        oi.order_return,
	        p.product_price,
	        p.thumbnail_img,
	        oi.order_quantity,
	        (oi.order_quantity * p.product_price) AS total_price,
	        p.product_name
	    FROM order_item oi
	    LEFT JOIN product p ON p.product_code = oi.product_code
	    WHERE oi.order_code = #{order_code}
	</select>
	<!-- <select id="getOrderInfo" parameterType="String" resultType="OrderItemDTO">
		select p.thumbnail_img, p.product_price, oi.order_quantity, (p.product_price * oi.order_quantity) as total_price, p.product_name
		from order_item oi
		left join product p
		on p.product_code = oi.product_code
		where order_code = #{order_code}
	</select> -->
	
	<!-- user_id로 order_code 가져오기 -->
	<select id="getOrderCodeByUserId" parameterType="String" resultType="String">
	    SELECT order_code
	    FROM orders
	    WHERE user_id_fk = #{user_id_fk}
	</select>
	
	<!-- 상품 등록  -->
	<insert id="add-product" parameterType="ProductDTO">
		INSERT INTO product (product_code, product_name, product_category, product_price, thumbnail_img, product_img, product_info, product_regdate)
    	VALUES (#{product_code}, #{product_name}, #{product_category}, #{product_price}, #{thumbnail_img}, #{product_img}, #{product_info}, NOW());
	</insert>	
	
	<!-- 상품 수정 -->
	<update id="updateProduct" parameterType="ProductDTO">
	    UPDATE product
	    SET product_name = #{product_name},
	        product_price = #{product_price},
	        product_category = #{product_category},
	        thumbnail_img = #{thumbnail_img},
	        product_info = #{product_info},
	        product_update = NOW()
	    WHERE product_code = #{product_code}
	</update>
	
	<!-- 상품 삭제 -->
	<delete id="deleteProduct" parameterType="java.util.List">
		DELETE FROM product
	    WHERE product_code IN
	    <foreach item="product_code" collection="list" open="(" separator="," close=")">
	        #{product_code}
	    </foreach>;
	</delete>
	
	<!-- 상품 결제 (카트 정보) -->
	<!-- <select id="productPayment" parameterType="java.lang.String" resultType="PaymentDTO">
		SELECT
			P.PRODUCT_CODE,
			P.PRODUCT_NAME,
			P.PRODUCT_PRICE,
			P.THUMBNAIL_IMG,
			C.CART_QUANTITY
		FROM
		CART C
			LEFT JOIN PRODUCT P
			ON C.PRODUCT_CODE = P.PRODUCT_CODE
		WHERE C.USER_ID = #{USER_ID}
	</select>
	
	상품 유저
	<select id="productPaymentMember" resultType="PaymentDTO">
		SELECT
			M.USER_ID,
			M.NAME,
			M.PHONE_NUM,
			M.ZIPCODE,
			M.ADDRESS,
			M.DETAIL_ADDRESS
		FROM
		CART C
			LEFT JOIN MEMBER M
			ON C.USER_ID =  M.USER_ID
		WHERE C.USER_ID = #{USER_ID}
	</select>
	
	상품 총액
	<select id="getTotalCost" parameterType="java.lang.String" resultType="java.lang.Integer">
      SELECT
         sum(p.product_price * oi.order_quantity) as totalCost
      FROM
         order_item oi
         LEFT JOIN product p ON oi.product_code = p.product_code
      WHERE
         oi.order_code = #{order_code}
   </select> -->
       	
 	<!-- 회원 관리 리스트 -->
 	<select id="getTotalMember" resultType="MemberDTO">
 		select * from member
 		order by user_created_at desc
 		limit #{start}, #{pageSize}
 	</select>
 	
 	<!-- 결제 페이지 회원 정보 -->
 	<select id="getMember" resultType="PaymentDTO" parameterType="java.lang.String">
 		select user_id, name, phone_num, zipcode, address, detailaddress from member
 		where user_id = #{user_id}
 	</select>
 	
 	<!-- 결제 -->
    <!-- 배송지 정보 업데이트 -->
    <update id="updateAddress" parameterType="MemberDTO">
	    UPDATE member
	    SET name = #{name},
	        phone_num = #{phone_num},
	        zipcode = #{zipcode},
	        address = #{address},
	        detailaddress = #{detailaddress}
	    WHERE user_id = #{user_id}
	</update>

    <!-- 결제 상태 변경 -->
    <update id="updatePaymentStatus" parameterType="java.lang.String">
        UPDATE orders
        SET payment_status = 1
        WHERE user_id_fk = #{user_id}
    </update>

    <!-- 주문 아이템 삭제 -->
   <delete id="deleteOrderItems" parameterType="java.util.Map">
	    DELETE FROM cart
	    WHERE user_id = #{user_id}
	    AND product_code IN
	    <foreach item="code" index="index" collection="product_code" open="(" separator="," close=")">
	        #{code}
	    </foreach>
	</delete>
    
    <!-- product_code 가져오기 -->
    <select id="getProductCodeByUserId" parameterType="java.lang.String" resultType="java.lang.Integer">
	    SELECT product_code
	    FROM cart
	    WHERE user_id = #{user_id}
	</select>
 	
 	<!-- 회원 관리 리스트 페이징 -->
 	<select id="memberPaging" resultType="java.lang.Integer">
		select count(*) from member;
	</select>
 	
 	<!-- 회원 리스트 검색 필터 -->
 	<select id="searchWithFilters" parameterType="java.util.Map" resultType="MemberDTO">
        SELECT user_id, name, phone_num, user_created_at, connected_at
	    FROM member
	    WHERE 1=1
        <!-- 검색 유형 조건 -->
        <if test="searchKeyword != null and searchKeyword != ''">
	        <if test="searchType == 'email'">
	            AND user_id LIKE CONCAT('%', #{searchKeyword}, '%')
	        </if>
	        <if test="searchType == 'name'">
	            AND name LIKE CONCAT('%', #{searchKeyword}, '%')
	        </if>
        </if>
        <!-- 기간 조건 -->        
	     <if test="startDate != null and startDate != ''">
		    AND user_created_at >= #{startDate}
		</if>
		<if test="endDate != null and endDate != ''">
		<![CDATA[
		    AND user_created_at <= #{endDate}
		    ]]>
		</if>
    </select>
    
      <!-- 회원 검색 필터 페이징 -->
    <select id="searchMemberWithPaging" resultType="MemberDTO">
	    SELECT *
	    FROM member
	    WHERE 1=1
	         <if test="searchKeyword != null and searchKeyword.trim() != ''">
		        <if test="searchType == 'email'">
		            AND user_id LIKE CONCAT('%', #{searchKeyword}, '%')
		        </if>
		        <if test="searchType == 'name'">
		            AND name LIKE CONCAT('%', #{searchKeyword}, '%')
		        </if>
	        </if>
	        <if test="startDate != null and startDate != ''">
	            AND user_created_at >= #{startDate}
	        </if>
	        <if test="endDate != null and endDate != ''">
	         <![CDATA[
	            AND user_created_at <= #{endDate}
	           ]]>
	        </if>
	    ORDER BY user_created_at DESC
	    LIMIT #{start}, #{pageSize}
	</select>
	<select id="getFilteredMemberCount" resultType="java.lang.Integer">
	    SELECT COUNT(*)
	    FROM member
	    WHERE 1=1
	       <if test="searchKeyword != null and searchKeyword != ''">
		        <if test="searchType == 'email'">
		            AND user_id LIKE CONCAT('%', #{searchKeyword}, '%')
		        </if>
		        <if test="searchType == 'name'">
		            AND name LIKE CONCAT('%', #{searchKeyword}, '%')
		        </if>
	        </if>
	         <if test="startDate != null and startDate != ''">
		          AND user_created_at >= #{startDate}
		      </if>
		     <if test="endDate != null and endDate != ''">
		     <![CDATA[
	     	     AND user_created_at <= #{endDate}
	     	     ]]>
		     </if>
	</select>
 	
 	<!-- 회원 탈퇴 -->
 	<update id="deleteUsers" parameterType="java.util.List">
	    UPDATE member
	    SET user_status = 1
	    WHERE user_id IN
	    <foreach collection="list" item="user_id" open="(" separator="," close=")">
	        #{user_id}
	    </foreach>
	</update>
	
	<!-- 카트 -->
	<!-- 장바구니에서 주문하기 -->
	<insert id="addOrder" parameterType="OrderDTO"
		useGeneratedKeys="true" keyProperty="order_code">
		INSERT INTO
		orders(order_code,
		user_id_fk, payment_status)
		VALUES (#{order_code},
		#{user_id_fk}, "0")
	</insert>

	<!-- 장바구니에서 주문 아이템 추가하기 -->
	<insert id="addOrderItems" parameterType="list">
		INSERT INTO
		order_item (order_code, product_code, order_quantity)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.order_code}, #{item.product_code}, #{item.order_quantity})
		</foreach>
		;
	</insert>
	
	<!-- 마이페이지 주문 내역 -->
	<select id="getMyOrders" parameterType="java.lang.String"
		resultType="MyDTO">
		SELECT
		o.ordered_at AS orderedAt,
		o.order_code AS orderCode,
		(SELECT p.product_name
		FROM order_item oi
		JOIN product p ON
		oi.product_code = p.product_code
		WHERE oi.order_code = o.order_code
		ORDER BY oi.product_code ASC
		LIMIT 1) AS firstProductName,
		(SELECT
		SUM(p.product_price *
		oi.order_quantity)
		FROM order_item oi
		JOIN product
		p ON oi.product_code = p.product_code
		WHERE oi.order_code =
		o.order_code) AS totalPrice,
		o.payment_status AS
		paymentStatus

		FROM
		orders o

		WHERE
		o.user_id_fk = #{user_id}
		ORDER BY
		o.ordered_at DESC
	</select>

	<resultMap id="orderResultMap" type="OrderDTO">
		<result property="orderCode" column="order_code" />
		<result property="userIdFk" column="user_id_fk" />
		<result property="orderedAt" column="ordered_at" />
		<result property="productCost" column="product_cost" />
		<result property="paymentStatus" column="payment_status" />
	</resultMap>
	
	<!-- 장바구니 -->
	<!-- 장바구니 통합쓰 ㅋㅋㅋ -->
	<select id="getCartInfo" parameterType="java.lang.String"
		resultType="CartDTO">
		SELECT
		c.user_id,
		c.product_code,
		p.thumbnail_img,
		p.product_name,
		c.cart_quantity,
		p.product_price,
		(c.cart_quantity *
		p.product_price) AS totalPrice
		FROM cart c LEFT JOIN product p ON
		c.product_code = p.product_code
		WHERE
		c.user_id = #{user_id}
	</select>

	<!-- 장바구니 아이템 삭제 -->
	<delete id="deleteCart" parameterType="CartDTO">
		DELETE FROM cart
		WHERE
		user_id = #{user_id} and product_code = #{product_code}
	</delete>
	
	<resultMap id="orderDetailMap" type="kr.co.dong.catdog.OrderDetailDTO">
	    <!-- 주문 정보 -->
	    <result property="orderCode" column="orderCode" />
	    <result property="userId" column="userId" />
	    <result property="name" column="name" />
	    <result property="phoneNum" column="phoneNum" />
	    <result property="orderedAt" column="orderedAt" />
	
	    <!-- 배송지 정보 -->
	    <result property="zipcode" column="zipcode" />
	    <result property="address" column="address" />
	    <result property="detailAddress" column="detailAddress" />
	
	    <!-- 상품 리스트 -->
	    <collection property="orderItems" ofType="kr.co.dong.catdog.OrderItemDTO">
	        <result property="thumbnailImg" column="thumbnail_img" />
	        <result property="productName" column="product_name" />
	        <result property="orderQuantity" column="order_quantity" />
	        <result property="totalPrice" column="total_price" />
	        <result property="orderStatus" column="order_status" />
	    </collection>
	</resultMap>

	<select id="getOrderDetail" parameterType="java.lang.String" resultMap="orderDetailMap">
	    SELECT
	        o.order_code AS orderCode,
	        o.user_id_fk AS userId,
	        o.ordered_at AS orderedAt,
	        m.name AS name,
	        m.phone_num AS phoneNum,
	        m.zipcode AS zipcode,
	        m.address AS address,
	        m.detailaddress AS detailAddress,
	        p.thumbnail_img AS thumbnailImg,
	        p.product_name AS productName,
	        oi.order_quantity AS orderQuantity,
	        p.product_price as productPrice,
	        (p.product_price * oi.order_quantity) AS totalPrice,
	        oi.order_status AS orderStatus
	    FROM orders o
	    LEFT JOIN member m ON o.user_id_fk = m.user_id
	    LEFT JOIN order_item oi ON o.order_code = oi.order_code
	    LEFT JOIN product p ON oi.product_code = p.product_code
	    WHERE o.order_code = #{order_code}
	    ORDER BY oi.product_code ASC;
	</select>
	
	<!-- 총합 -->
	<select id="getTotalCost" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT
		sum(p.product_price * oi.order_quantity) as totalCost
		FROM
		order_item oi
		LEFT JOIN product p ON oi.product_code =
		p.product_code
		WHERE
		oi.order_code = #{order_code}
	</select>
	
	<!-- 장바구니 수량 변경 -->
	<update id="updateCartQuantity" parameterType="CartDTO">
		UPDATE cart
		SET
		cart_quantity = #{cart_quantity}
		WHERE user_id = #{user_id}
		AND
		product_code = #{product_code}
	</update>
	
	<select id="getCartCost" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT
		coalesce(sum(p.product_price * c.cart_quantity), 0) as cartCost
		FROM
		cart c LEFT JOIN product p
		ON c.product_code = p.product_code
		WHERE
		c.user_id = #{usegr_id}
	</select>
	
	<!-- 카테고리 리스트 -->
	<select id="mainlist" parameterType="java.util.Map"
		resultType="ProductDTO">
		SELECT
		p.*,
		(SELECT wish_no
		FROM wish w
		WHERE w.user_id =
		#{user_id} AND w.product_code = p.product_code) AS
		wish_no
		FROM
		product p
		WHERE
		p.product_category = #{product_category}
		ORDER BY
		p.product_regdate DESC
	</select>

	<!-- 리스트에서 제품 선택 -->
	<select id="product_detail" parameterType="java.lang.Integer"
		resultType="BoardDTO">
		select *
		from product
		where product_code = #{product_code}
	</select>
	
	<!-- 회원 정보 업데이트 -->

	<update id="updateProfile" parameterType="MemberDTO">
		UPDATE member
		SET
		password = #{password},
		phone_num = #{phone_num},
		zipcode = #{zipcode},
		address = #{address},
		detailaddress = #{detailaddress}
		WHERE user_id =
		#{user_id}
	</update>
	
	<!-- 지혜 -->
	<!-- 장바구니 추가  -->
	<insert id="addCart" parameterType="cartDTO">
		  INSERT INTO cart (user_id, product_code, cart_quantity)
    VALUES (#{user_id}, #{product_code}, #{cart_quantity})
    ON DUPLICATE KEY UPDATE
    cart_quantity = cart_quantity + #{cart_quantity}
	</insert>
	<!-- 상품 상세 정보 -->
	<select id="productDetail" parameterType="java.lang.Integer" resultType="productDTO">
		select *
		from product 
		where product_code = #{product_code}
	</select>
	
	<!-- 최근 리뷰 5개 리스트 -->
	<select id="getReview" parameterType="java.lang.Integer" resultType="ReviewDTO">
	    select *
	    from review 
	    where product_code = #{product_code}
	    order by review_no desc
	    limit 5
	</select>
	
	<!-- 상품 상세 리뷰 개수 -->
	<select id="product_reviewTotal" resultType="java.lang.Integer">
		select count(*) 
		from review
		where product_code = #{product_code}
	</select>
	
	<!-- 최근 Q&A 5개 리스트 -->
	<select id="getQna" parameterType="java.lang.Integer" resultType="QnaDTO">
		select *
		from qna
		where product_code_fk = #{product_code}
		order by qna_no desc
		limit 5
	</select>
	
	<!-- 상품 상세 Q&A 개수 -->
	<select id="product_qnaTotal" resultType="java.lang.Integer">
		select count(*)
		from qna
		where product_code_fk = #{product_code}
	</select>
	
	<!-- 카테고리 리스트 -->
	<select id="categoryList" resultType="ProductDTO">
		select *
		from product
		 WHERE product_category = #{product_category}
		order by product_regdate desc
		limit #{start}, #{pageSize} 
	</select>
	
	<!-- 카테고리 페이징 -->
	<select id="categoryTotalPost" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		select count(*) from product WHERE product_category = #{product_category}
	</select>
	
	<!-- 공지사항 리스트 -->
	<select id="noticeList" parameterType="map" resultType="NoticeDTO">
		select *
		from notice
		order by notice_no desc
       	limit #{start}, #{pageSize}
	</select>
	 
	<!-- 공지사항 페이징 -->
	<select id="noticeTotalPost" resultType="java.lang.Integer">
		select count(*)
		from notice;
	</select>
	
	<!-- 리뷰 리스트 -->
	<select id="reviewList" parameterType="map" resultType="ReviewDTO">
		select r.*, p.product_name
		from review r left join product p on r.product_code = p.product_code
		
		order by review_no desc
       	limit #{start}, #{pageSize}
	</select>
	
	<!-- 리뷰 페이징 -->
	<select id="reviewTotalPost" resultType="java.lang.Integer">
		select count(*)
		from review;
	</select>
	
	<!-- Q&A 리스트 -->
	<select id="qnaList" parameterType="map" resultType="QnaDTO">
		select *
		from qna
		order by qna_no desc
       	limit #{start}, #{pageSize}
	</select>
	 
	<!-- Q&A 페이징 -->
	<select id="qnaTotalPost" resultType="java.lang.Integer">
		select count(*)
		from qna;
	</select>
	
	<!-- FAQ 리스트 -->
 	<select id="faqList" parameterType="map" resultType="FaqDTO">
		select *
		from faq
		order by faq_no desc
       	limit #{start}, #{pageSize}
	</select>
	
	<!-- FAQ 페이징 -->
	<select id="faqTotalPost" resultType="java.lang.Integer">
		select count(*)
		from faq;
	</select>
	
	<!-- FAQ 구분 리스트 -->
	<select id="faqTotalPostDivision" parameterType="java.lang.Integer" resultType="java.lang.Integer">
	    SELECT COUNT(*) 
	    FROM faq
	    WHERE faq_division = #{faq_division}
	</select>
	
	<!-- FAQ 구분 페이징 -->
	<select id="faqListDivision" parameterType="map" resultType="FaqDTO">
	    SELECT *
	    FROM faq
	    WHERE faq_division = #{faq_division}
	    ORDER BY faq_no DESC
	    LIMIT #{start}, #{pageSize}
	</select>
	
	<!-- 공지사항 상세 글 조회  -->
	<select id="noticeDetail" parameterType="java.lang.Integer" resultType="NoticeDTO">
		select *
		from notice
		where notice_no = #{notice_no}
	</select>
	
	<!-- 공지사항 조회수 1 증가하는 SQL -->
	<update id="noticeUpdateReadCnt" parameterType="java.lang.Integer">
		update notice
		set notice_readcnt = notice_readcnt + 1
		where notice_no = #{notice_no}
	</update>
	
	<!-- 리뷰 상세 글 조회 -->
	<select id="reviewDetail" parameterType="java.lang.Integer" resultType="ReviewDTO">
		select r.*, p.product_name
		from review r left join product p on r.product_code = p.product_code
		where review_no = #{review_no}
	</select>
	
	<!-- 리뷰 조회수 1 증가하는 SQL -->
	<update id="reviewUpdateReadCnt" parameterType="java.lang.Integer">
		update review
		set review_readcnt = review_readcnt + 1
		where review_no = #{review_no}
	</update>
	
	<!-- Q&A 상세 글 조회-->
	<select id="qnaDetail" parameterType="java.lang.Integer" resultType="QnaDTO">
	    select q.*, p.product_name
	    from qna q
	    left join product p on q.product_code_fk = p.product_code
	    where q.qna_no = #{qna_no}
	</select>
	
	<!-- FAQ 상세 조회 -->
	<select id="faqDetail" parameterType="java.lang.Integer" resultType="FaqDTO">
		select *
		from faq
		where faq_no = #{faq_no}
	</select>
	
	<!-- 공지사항 글 작성하는 SQL -->
	<insert id="noticeRegister" parameterType="NoticeDTO">
		insert into notice(notice_no, notice_title, notice_content, notice_date, notice_readcnt)
		values (#{notice_no}, #{notice_title}, #{notice_content}, now(), #{notice_readcnt})		
	</insert>
	
	<!-- 공지사항 글 수정하는 SQL -->
	<update id="noticeUpdate" parameterType="NoticeDTO">
		update notice
		set notice_title = #{notice_title}, notice_content = #{notice_content}
		where notice_no = #{notice_no}
	</update>
	
	<!-- 공지사항 글 삭제하는 SQL -->
	<delete id="noticeDelete" parameterType="java.lang.Integer">
		delete from notice
		where notice_no = #{notice_no}
	</delete>
	
	<!-- Q&A 글 작성하는 SQL -->
	<insert id="qnaRegister" parameterType="QnaDTO">
		insert into qna( product_code_fk, user_id, qna_content, qna_secret, qna_date, qna_pwd)
		values ( #{product_code_fk}, #{user_id}, #{qna_content}, #{qna_secret}, curdate(), #{qna_pwd})		
	</insert>
	
	<!-- Q&A 글 수정하는 SQL -->
	<update id="qnaUpdate" parameterType="QnaDTO">
		update qna
		set product_code_fk=#{product_code_fk}, qna_content=#{qna_content}, qna_secret=#{qna_secret}, qna_date=curdate(), qna_pwd=#{qna_pwd}
		where qna_no = #{qna_no}
	</update>
	
	<!-- Q&A 글 삭제하는 SQL -->
	<delete id="qnaDelete" parameterType="java.lang.Integer">
		delete from qna
		where qna_no = #{qna_no}
	</delete>
	
	<!-- Q&A 글 답변 작성하는 SQL -->
	<update id="qnaReply" parameterType="QnaDTO">
		update qna
		set qna_reply = #{qna_reply}
		where qna_no = #{qna_no}
	</update>
	
	<!-- Q&A 답변 수정 -->
	<update id="qnaReplyUpdate" parameterType="QnaDTO">
		update qna
		set qna_reply = #{qna_reply}
		where qna_no = #{qna_no}
	</update>
	
	<!-- Q&A 답변 삭제 -->
	<update id="qnaReplyDelete" parameterType="java.lang.Integer">
		update qna
		set qna_reply = null
		where qna_no = #{qna_no}
	</update>
	
	<!-- qna 답변 볼수 있는 SQL -->
	<select id="qnaReplyDetail" parameterType="java.lang.Integer" resultType="QnaDTO">
		select q.*, p.product_name
	    from qna q
	    left join product p on q.product_code_fk = p.product_code
	    where q.qna_no = #{qna_no}
	</select>
	
	<!-- 상품검색 -->
	<select id="productSearch" resultType="ProductDTO">
        select product_code, product_name, thumbnail_img
        from product
        where product_name LIKE CONCAT('%', #{keyword}, '%')
    </select>
    <!-- 
    <select id="productTotal" resultType="java.lang.Integer">
    	select count(*) 
    	from product;
    </select>
     -->
		<!-- FAQ 글 작성하는 SQL -->
	<insert id="faqRegister" parameterType="FaqDTO">
		insert into faq(faq_no, faq_division, faq_question, faq_reply)
		values (#{faq_no}, #{faq_division}, #{faq_question}, #{faq_reply})		
	</insert>
	
	
	
	<!-- FAQ 글 수정하는 SQL -->
	<update id="faqUpdate" parameterType="FaqDTO">
		update faq
		set faq_division = #{faq_division}, faq_question = #{faq_question}, faq_reply = #{faq_reply}
		where faq_no = #{faq_no}
	</update>
	
	<!-- FAQ 글 삭제하는 SQL -->
	<delete id="faqDelete" parameterType="java.lang.Integer">
		delete from faq
		where faq_no = #{faq_no}
	</delete>
 	
  </mapper>