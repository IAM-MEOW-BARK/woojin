<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="kr.co.dong.boardMapper">
  	<!-- 로그인 -->
 	<select id="login" parameterType="java.util.Map" resultType="java.util.Map">
 		select user_id,name,user_auth from member
 		where user_id=#{user_id} and password=#{password}
 	</select>
 	
 	<!-- 회원가입 -->
 	<insert id="sign-up" parameterType="MemberDTO">
	    insert into member (user_id, social_id, password, name, phone_num, user_auth, user_created_at)
	    values (#{user_id}, #{social_id}, #{password}, #{name}, #{phone_num}, 
	            #{user_auth}, now())
	</insert>
 	
 	<!-- 이메일 중복 -->
 	<select id="email-check" parameterType="String" resultType="int">
	    select count(*) from member
	    where user_id = #{user_id}
	</select>
	
		
	<!-- 상품 관리 리스트 -->
	<select id="getTotalProduct" resultType="ProductDTO">
 		<!-- select * from product
 		order by product_regdate desc -->
 		select *
		from product
		order by product_regdate desc
       	limit #{start}, #{pageSize}
 	</select>
 	
 	<!-- 상품 리스트 검색 필터 -->
 	<select id="productListFilter" parameterType="java.util.Map" resultType="productDTO">
         SELECT * FROM product WHERE 1 = 1
        <!-- 검색 유형 조건 -->
        <if test="searchKeyword != null and searchKeyword != ''">
	        <choose>
            <when test="searchType == 'product_name'">
                AND product_name LIKE CONCAT('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'product_code'">
                AND product_code LIKE CONCAT('%', #{searchKeyword}, '%')
            </when>
            <when test="searchType == 'product_category'">
                AND product_category LIKE CONCAT('%', #{searchKeyword}, '%')
            </when>
        </choose>
        </if>
        
        <!-- 기간 조건 -->        
	     <if test="startDate != null and startDate != ''">
	        AND product_regdate >= #{startDate}
	    </if>
		<if test="endDate != null and endDate != ''">
            <![CDATA[
            AND product_regdate <= #{endDate}
            ]]>
		</if>
		 LIMIT #{offset}, #{pageSize}
    </select>
 	
 	<!-- 상품 관리 리스트 페이징 -->
 	<select id="productPaging" resultType="java.lang.Integer">
		select count(*) from product;
	</select>
	
	<!-- 상품 단일 조회  -->
	<select id="getProductByCode" parameterType="java.util.Map" resultType="ProductDTO">
	    SELECT *
	    FROM product
	    WHERE product_code = #{product_code}
	</select>
	
	<!-- 상품 등록  -->
	<insert id="add-product" parameterType="ProductDTO">
		INSERT INTO product (product_code, product_name, product_category, product_price, thumbnail_img, product_img, product_info, product_regdate)
    	VALUES (#{product_code}, #{product_name}, #{product_category}, #{product_price}, #{thumbnail_img}, #{product_img}, #{product_info}, NOW());
	</insert>	
	
	<update id="updateProduct" parameterType="ProductDTO">
	    UPDATE product
	    SET product_name = #{product_name},
	        product_price = #{product_price},
	        product_category = #{product_category},
	        thumbnail_img = #{thumbnail_img},
	        product_info = #{product_info},
	        product_update = NOW()
	    WHERE product_code = #{product_code}
	</update>
	
	<!-- 상품 삭제 -->
	<delete id="deleteProduct" parameterType="java.util.List">
		DELETE FROM product
	    WHERE product_code IN
	    <foreach item="product_code" collection="list" open="(" separator="," close=")">
	        #{product_code}
	    </foreach>;
	</delete>
       	
 	<!-- 회원 관리 리스트 -->
 	<select id="getTotalMember" resultType="MemberDTO">
 		select * from member
 		order by user_created_at desc
 		limit #{start}, #{pageSize}
 	</select>
 	
 	<!-- 회원 관리 리스트 페이징 -->
 	<select id="memberPaging" resultType="java.lang.Integer">
		select count(*) from member;
	</select>
 	
 	<!-- 회원 리스트 검색 필터 -->
 	<select id="searchWithFilters" parameterType="java.util.Map" resultType="MemberDTO">
        SELECT user_id, name, phone_num, user_created_at, connected_at
	    FROM member
	    WHERE 1=1
        <!-- 검색 유형 조건 -->
        <if test="searchKeyword != null and searchKeyword != ''">
	        <if test="searchType == 'email'">
	            AND user_id LIKE CONCAT('%', #{searchKeyword}, '%')
	        </if>
	        <if test="searchType == 'name'">
	            AND name LIKE CONCAT('%', #{searchKeyword}, '%')
	        </if>
        </if>
        
        <!-- 기간 조건 -->        
	     <if test="startDate != null and startDate != ''">
	        AND user_created_at >= #{startDate}
	    </if>
		<if test="endDate != null and endDate != ''">
            <![CDATA[
            AND user_created_at <= #{endDate}
            ]]>
		</if>
    </select>
 	
 	<!-- 회원 탈퇴 -->
 	<update id="deleteUsers" parameterType="java.util.List">
	    UPDATE member
	    SET user_status = 1
	    WHERE user_id IN
	    <foreach collection="list" item="user_id" open="(" separator="," close=")">
	        #{user_id}
	    </foreach>
	</update> 	
 	
 	<!-- 글 전체 목록 -->
 	<select id="list" resultType="BoardDTO">
 		select * from board
 		where del = 0
 		order by bno desc	
 	</select>
 	
 	<!-- 글 하나 선택 -->
 	<select id="detail" parameterType="java.lang.Integer" resultType="BoardDTO">
 		select * from board
 		where bno=#{bno}
 	</select>
 	
 	<!-- 글 등록  -->
 	<insert id="register" parameterType="BoardDTO">
 		insert into board (bno, title, content, id, regdate, readcnt, etc, del)
 		values (#{bno}, #{title},#{content},#{id}, curdate(), 0, #{etc}, 0)
 	</insert>
 	
 	<!-- 글 수정  -->
 	<update id="update" parameterType="BoardDTO">
 		update board set title=#{title}, content=#{content}, regdate = curdate()
 		where bno=#{bno}
 	</update>
 	
 	<!-- 글 삭제 -->
 	<update id="delete" parameterType="java.lang.Integer">
 		update board set del = 1
 		where bno = #{bno}
 	</update>
 	
 	<!-- 조회수 증가 -->
 	<update id="readCnt" parameterType="java.lang.Integer">
 		update board set readcnt = readcnt + 1
 		where bno=#{bno}
 	</update>
 	
 	<!-- 댓글 등록  -->
 	<insert id="reply" parameterType="BoardReply">
 		insert into board_reply (rewriter, rememo, redate, bno)
 		values(#{rewriter}, #{rememo}, curdate(), #{bno})
 	</insert>
 	
 	<!-- 댓글 보기 -->
 	<select id="replylist" parameterType="java.lang.Integer" resultType="BoardReply">
		 select * from board_reply
		 where bno =#{bno}	
 	</select>
 	
 	<update id="replyupdate" parameterType="BoardReply">
 		update board_reply set rememo= #{rememo}, redate = curdate() where reno = #{reno}
 	</update>
 	
 	<delete id="deletereply" parameterType="java.lang.Integer">
 		delete from board_reply where reno=#{reno}
 	</delete> 	
  	
  	
  	<!-- 페이징  --> 
 	<select id="totalRecord" resultType="java.lang.Integer">
 		select count(*) from board where del = 0
 	</select>
 	
 	<select id="findAll" parameterType="java.util.Map" resultType="BoardDTO">
 		select *
 		from board
 		where del = 0
 		order by bno desc
 		LIMIT #{start}, #{end}
 	</select>
 	
 	<!-- <select id="findAll" parameterType="java.util.Map" resultType="BoardDTO">
 		select *
	from (select @ROWNUM:=@ROWNUM+1 rownum, bno, id, title, content, regdate 
			from (select *,(@ROWNUM:=0) r from board where del = 0 order by bno desc)A)B
	where rownum between #{start} and #{end}
 	</select> -->
  </mapper>